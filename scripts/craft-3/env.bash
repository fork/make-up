#!/bin/bash

# load helper
my_dir="$(dirname "$0")"
source "$my_dir/../../helper.bash"

echo
echo "$I18N_TASK 'Craft 3' â†’ Setup Environment"
echo

ok=false

rootEnv=".env"
file="site/.env"
file_example="site/.env.example"
file_backup="site/.env.original"

# Additional information for environment 'dev'
envDev() {
  cat <<EOF >>$file

# The following lines are initially auto-generated by '$ make envfile'
# The following environment variables are used within ./../Makefile, that is why we used a prefix like "E_"

# Environment dev on localhost
E_DEV_UPLOADS=$INITIAL_UPLOADS

# Default Site URL
DEFAULT_SITE_URL="http://$PROJECT_NAME.localhost"
EOF
}

# Additional information for environment 'staging'
envStaging() {
  cat <<EOF >>$file

# Credentials for environment 'staging'
E_STAGING_SSH_USER=USER
E_STAGING_SSH_HOST=HOST
E_STAGING_PROJECT_HOME=PROJECT_HOME
E_STAGING_DB_PASS=PASSWORD
E_STAGING_DB_USER=DB_USER
E_STAGING_DB_NAME=DB_NAME
E_STAGING_UPLOADS=UPLOADS
E_STAGING_DOCKER_COMPOSE_FILE
E_STAGING_DOCKER_COMPOSE_SERVICE
EOF
}

# Additional information for environment 'production'
envProduction() {
  cat <<EOF >>$file

# Credentials for environment 'production'
E_PRODUCTION_SSH_USER=USER
E_PRODUCTION_SSH_HOST=HOST
E_PRODUCTION_PROJECT_HOME=PROJECT_HOME
E_PRODUCTION_DB_PASS=PASSWORD
E_PRODUCTION_DB_USER=DB_USER
E_PRODUCTION_DB_NAME=DB_NAME
E_PRODUCTION_UPLOADS=UPLOADS
E_PRODUCTION_DOCKER_COMPOSE_FILE
E_PRODUCTION_DOCKER_COMPOSE_SERVICE
EOF
}

# Additional information for environment 'Craft 3.4.0'
env340() {
  cat <<EOF >>$file

DB_DATABASE="craft"
DB_SERVER="db"
DB_DRIVER="mysql"
EOF
}

# create reference to craft's .env in project root .env
touch $rootEnv

if [ -f "$rootEnv" ]; then
  echo
  echo "$I18N_TASK Create a reference to $file in $rootEnv"
  echo

  STRING="ENV_FILE=$file"

  # check if $STRING is already in $rootEnv
  if grep -Fxq "$STRING" $rootEnv; then
    echo
    echo "$I18N_SUCCESS Done"
    echo
  else
    printf "\n$STRING" >>$rootEnv

    echo
    echo "$I18N_SUCCESS Done"
    echo
  fi
else
  echo
  echo "$I18N_ERROR Could not find $rootEnv"
  echo
fi


if [ -f "$file" ]; then
  echo
  echo "$I18N_WARNING Existing $file found, creating backup"
  echo

  cp $file $file_backup

  if [ -f "$file_backup" ]; then
    echo
    echo "$I18N_SUCCESS Created $file_backup from $file"
    echo
  else
    echo
    echo "$I18N_ERROR Could not create $file_backup from $file"
    echo
  fi
fi

echo
echo "$I18N_TASK Create $file from $file_example"
echo

if [ -f "$file_example" ]; then
  # create new .env file
  cp $file_example $file

  echo
  echo "$I18N_SUCCESS Done"
  echo
else
  echo
  echo "$I18N_ERROR $file_example not found. Craft installation is corrupted."
  echo
fi

if [ -f "$file" ]; then
  echo
  echo "$I18N_TASK Generating a security key in $file"

  # Generating a security key
  ./site/craft setup/security-key

  echo
  echo "$I18N_SUCCESS Done"
  echo

  echo
  echo "$I18N_TASK Make injections to $file"
  echo

  # Add information for environment 'dev'
  envDev

  # Add information for environment 'Craft CMS >= 3.4.0'
  STRING="DB_DSN=\"\""
  # check if $STRING is found in $file
  if grep -Fxq "$STRING" $file; then
    # Craft CMS >= 3.4.0
    env340
  fi
  
  # Add information for environment 'staging'
  envStaging

  # Add information for environment 'production'
  envProduction

  echo
  echo "$I18N_SUCCESS Done"
  echo

  echo
  echo "$I18N_TASK Make replacements in $file"
  echo

  # Replace some values to connect with docker database
  sed 's#DB_DSN=""#DB_DSN="mysql:host=db;port=3306;dbname=craft"#' $file >tmp && mv tmp $file # craft >= 3.4.0
  sed 's#DB_SERVER="localhost"#DB_SERVER="db"#' $file >tmp && mv tmp $file # craft < 3.4.0
  sed 's#DB_DATABASE=""#DB_DATABASE="craft"#' $file >tmp && mv tmp $file # craft < 3.4.0
  sed 's#DB_USER="root"#DB_USER="craft"#' $file >tmp && mv tmp $file # craft >= 3.0.0
  sed 's#DB_PASSWORD=""#DB_PASSWORD="craft"#' $file >tmp && mv tmp $file # craft >= 3.0.0
  sed 's#DB_TABLE_PREFIX=""#DB_TABLE_PREFIX="craft"#' $file >tmp && mv tmp $file # craft >= 3.0.0

  # Ask for a value
  VARIABLE_NAME="E_DEV_UPLOADS"
  DEFAULT_VALUE="site/web/uploads"
  QUESTION="Set relative path to uploads for ${WHITE}dev${NC}"

  echo "$I18N_QUESTION $QUESTION (default: $DEFAULT_VALUE)"
  read -p "  " answer
  if [ -n "$answer" ]; then
    sed 's#'"$VARIABLE_NAME"'='"$DEFAULT_VALUE"'#'"$VARIABLE_NAME"'='"$answer"'#' $file >tmp && mv tmp $file
    echo
  fi

  # Ask for a value
  VARIABLE_NAME="E_STAGING_SSH_USER"
  DEFAULT_VALUE="USER"
  QUESTION="Set SSH user for ${YELLOW}staging${NC}"

  echo "$I18N_QUESTION $QUESTION (default: $DEFAULT_VALUE)"
  read -p "  " answer
  if [ -n "$answer" ]; then
    sed 's#'"$VARIABLE_NAME"'='"$DEFAULT_VALUE"'#'"$VARIABLE_NAME"'='"$answer"'#' $file >tmp && mv tmp $file
    echo
  fi

  # Ask for a value
  VARIABLE_NAME="E_STAGING_SSH_HOST"
  DEFAULT_VALUE="HOST"
  QUESTION="Set SSH host for ${YELLOW}staging${NC}"

  echo "$I18N_QUESTION $QUESTION (default: $DEFAULT_VALUE)"
  read -p "  " answer
  if [ -n "$answer" ]; then
    sed 's#'"$VARIABLE_NAME"'='"$DEFAULT_VALUE"'#'"$VARIABLE_NAME"'='"$answer"'#' $file >tmp && mv tmp $file
    echo
  fi

  # Ask for a value
  VARIABLE_NAME="E_STAGING_PROJECT_HOME"
  DEFAULT_VALUE="PROJECT_HOME"
  QUESTION="Set path to project home for ${YELLOW}staging${NC}"

  echo "$I18N_QUESTION $QUESTION (default: $DEFAULT_VALUE)"
  read -p "  " answer
  if [ -n "$answer" ]; then
    sed 's#'"$VARIABLE_NAME"'='"$DEFAULT_VALUE"'#'"$VARIABLE_NAME"'='"$answer"'#' $file >tmp && mv tmp $file
    echo
  fi

  # Ask for a value
  VARIABLE_NAME="E_STAGING_UPLOADS"
  DEFAULT_VALUE="UPLOADS"
  QUESTION="Set absolute path to uploads for ${YELLOW}staging${NC}"

  echo "$I18N_QUESTION $QUESTION (default: $DEFAULT_VALUE)"
  read -p "  " answer
  if [ -n "$answer" ]; then
    sed 's#'"$VARIABLE_NAME"'='"$DEFAULT_VALUE"'#'"$VARIABLE_NAME"'='"$answer"'#' $file >tmp && mv tmp $file
    echo
  fi

  # Ask for a value
  VARIABLE_NAME="E_STAGING_DB_PASS"
  DEFAULT_VALUE="PASSWORD"
  QUESTION="Set database password for ${YELLOW}staging${NC}"

  echo "$I18N_QUESTION $QUESTION (default: $DEFAULT_VALUE)"
  read -p "  " answer
  if [ -n "$answer" ]; then
    sed 's#'"$VARIABLE_NAME"'='"$DEFAULT_VALUE"'#'"$VARIABLE_NAME"'='"$answer"'#' $file >tmp && mv tmp $file
    echo
  fi

  # Ask for a value
  VARIABLE_NAME="E_STAGING_DB_USER"
  DEFAULT_VALUE="DB_USER"
  QUESTION="Set database user for ${YELLOW}staging${NC}"

  echo "$I18N_QUESTION $QUESTION (default: $DEFAULT_VALUE)"
  read -p "  " answer
  if [ -n "$answer" ]; then
    sed 's#'"$VARIABLE_NAME"'='"$DEFAULT_VALUE"'#'"$VARIABLE_NAME"'='"$answer"'#' $file >tmp && mv tmp $file
    echo
  fi

  # Ask for a value
  VARIABLE_NAME="E_STAGING_DB_NAME"
  DEFAULT_VALUE="DB_NAME"
  QUESTION="Set database name for ${YELLOW}staging${NC}"

  echo "$I18N_QUESTION $QUESTION (default: $DEFAULT_VALUE)"
  read -p "  " answer
  if [ -n "$answer" ]; then
    sed 's#'"$VARIABLE_NAME"'='"$DEFAULT_VALUE"'#'"$VARIABLE_NAME"'='"$answer"'#' $file >tmp && mv tmp $file
    echo
  fi

  # Ask for a value
  VARIABLE_NAME="E_PRODUCTION_SSH_USER"
  DEFAULT_VALUE="USER"
  QUESTION="Set SSH user for ${GREEN}production${NC}"

  echo "$I18N_QUESTION $QUESTION (default: $DEFAULT_VALUE)"
  read -p "  " answer
  if [ -n "$answer" ]; then
    sed 's#'"$VARIABLE_NAME"'='"$DEFAULT_VALUE"'#'"$VARIABLE_NAME"'='"$answer"'#' $file >tmp && mv tmp $file
    echo
  fi

  # Ask for a value
  VARIABLE_NAME="E_PRODUCTION_SSH_HOST"
  DEFAULT_VALUE="HOST"
  QUESTION="Set SSH host for ${GREEN}production${NC}"

  echo "$I18N_QUESTION $QUESTION (default: $DEFAULT_VALUE)"
  read -p "  " answer
  if [ -n "$answer" ]; then
    sed 's#'"$VARIABLE_NAME"'='"$DEFAULT_VALUE"'#'"$VARIABLE_NAME"'='"$answer"'#' $file >tmp && mv tmp $file
    echo
  fi

  # Ask for a value
  VARIABLE_NAME="E_PRODUCTION_PROJECT_HOME"
  DEFAULT_VALUE="PROJECT_HOME"
  QUESTION="Set path to project home for ${GREEN}production${NC}"

  echo "$I18N_QUESTION $QUESTION (default: $DEFAULT_VALUE)"
  read -p "  " answer
  if [ -n "$answer" ]; then
    sed 's#'"$VARIABLE_NAME"'='"$DEFAULT_VALUE"'#'"$VARIABLE_NAME"'='"$answer"'#' $file >tmp && mv tmp $file
    echo
  fi

  # Ask for a value
  VARIABLE_NAME="E_PRODUCTION_UPLOADS"
  DEFAULT_VALUE="UPLOADS"
  QUESTION="Set absolute path to uploads for ${GREEN}production${NC}"

  echo "$I18N_QUESTION $QUESTION (default: $DEFAULT_VALUE)"
  read -p "  " answer
  if [ -n "$answer" ]; then
    sed 's#'"$VARIABLE_NAME"'='"$DEFAULT_VALUE"'#'"$VARIABLE_NAME"'='"$answer"'#' $file >tmp && mv tmp $file
    echo
  fi

  # Ask for a value
  VARIABLE_NAME="E_PRODUCTION_DB_PASS"
  DEFAULT_VALUE="PASSWORD"
  QUESTION="Set database password for ${GREEN}production${NC}"

  echo "$I18N_QUESTION $QUESTION (default: $DEFAULT_VALUE)"
  read -p "  " answer
  if [ -n "$answer" ]; then
    sed 's#'"$VARIABLE_NAME"'='"$DEFAULT_VALUE"'#'"$VARIABLE_NAME"'='"$answer"'#' $file >tmp && mv tmp $file
    echo
  fi

  # Ask for a value
  VARIABLE_NAME="E_PRODUCTION_DB_USER"
  DEFAULT_VALUE="DB_USER"
  QUESTION="Set database user for ${GREEN}production${NC}"

  echo "$I18N_QUESTION $QUESTION (default: $DEFAULT_VALUE)"
  read -p "  " answer
  if [ -n "$answer" ]; then
    sed 's#'"$VARIABLE_NAME"'='"$DEFAULT_VALUE"'#'"$VARIABLE_NAME"'='"$answer"'#' $file >tmp && mv tmp $file
    echo
  fi

  # Ask for a value
  VARIABLE_NAME="E_PRODUCTION_DB_NAME"
  DEFAULT_VALUE="DB_NAME"
  QUESTION="Set database name for ${GREEN}production${NC}"

  echo "$I18N_QUESTION $QUESTION (default: $DEFAULT_VALUE)"
  read -p "  " answer
  if [ -n "$answer" ]; then
    sed 's#'"$VARIABLE_NAME"'='"$DEFAULT_VALUE"'#'"$VARIABLE_NAME"'='"$answer"'#' $file >tmp && mv tmp $file
    echo
  fi

  # tell the user that he/she has to provide information for production
  echo "  ${WHITE}INFO${NC} Please visit $file and fill in missing information"

  echo
  echo "$I18N_SUCCESS Done"
  echo
else
  echo
  echo "$I18N_ERROR Could not create $file from $file_example"
  echo
fi

# more-make-up
MORE_MAKE_UP="${0/make-up/more-make-up}"
if [ -f "$MORE_MAKE_UP" ]; then
  echo
  echo "$I18N_TASK Run more Make-up from $MORE_MAKE_UP"
  echo

  $MORE_MAKE_UP

  echo
  echo "$I18N_SUCCESS Done"
  echo

  ok=true
fi
